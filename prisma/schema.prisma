generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}

model User {
    id                String            @id @default(auto()) @map("_id") @db.ObjectId
    username          String            @unique
    email             String            @unique
    password          String
    isVerified        Boolean           @default(false)
    role              Role              @default(customer)
    hizmetAlan        HizmetAlan?
    hizmetVeren       HizmetVeren?
    VerificationCode  VerificationCode?
    createdAt         DateTime          @default(now())
    updatedAt         DateTime          @updatedAt
    userType          UserType?         @default(RECEIVER)
    messagesSent      Message[]         @relation("Sender")
    messagesReceived  Message[]         @relation("Receiver")
    chatsStarted      Chat[]            @relation("Starter")
    chatsParticipated Chat[]            @relation("Participant")
    archivedChats     ChatArchive[]     @relation("UserArchives")
    savedPosts        SavedPost[]       @relation("UserSavedPosts")
    following         Follow[]          @relation("UserFollowing")
    followers         Follow[]          @relation("UserFollowers")
}

model Chat {
    id            String        @id @default(auto()) @map("_id") @db.ObjectId
    starterId     String        @db.ObjectId
    participantId String        @db.ObjectId
    createdAt     DateTime      @default(now())
    status        ChatStatus    @default(ACTIVE)
    starter       User          @relation("Starter", fields: [starterId], references: [id])
    participant   User          @relation("Participant", fields: [participantId], references: [id])
    messages      Message[]
    archives      ChatArchive[] @relation("ChatArchives")
}

model ChatArchive {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    userId    String   @db.ObjectId
    chatId    String   @db.ObjectId
    archived  Boolean  @default(true)
    createdAt DateTime @default(now())
    user      User     @relation("UserArchives", fields: [userId], references: [id])
    chat      Chat     @relation("ChatArchives", fields: [chatId], references: [id])

    @@unique([userId, chatId])
}

model Message {
    id         String   @id @default(auto()) @map("_id") @db.ObjectId
    content    String
    senderId   String   @db.ObjectId
    receiverId String   @db.ObjectId
    chatId     String   @db.ObjectId
    createdAt  DateTime @default(now())

    isRead   Boolean? @default(false)
    sender   User     @relation("Sender", fields: [senderId], references: [id])
    receiver User     @relation("Receiver", fields: [receiverId], references: [id])
    chat     Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade)
}

enum ChatStatus {
    ACTIVE
    ARCHIVED
}

model Follow {
    id          String @id @default(auto()) @map("_id") @db.ObjectId
    follower    User   @relation("UserFollowing", fields: [followerId], references: [id])
    followerId  String
    following   User   @relation("UserFollowers", fields: [followingId], references: [id])
    followingId String
}

model HizmetAlan {
    id                   String     @id @default(auto()) @map("_id") @db.ObjectId
    name                 String
    surname              String
    onlineStatus         Boolean
    totalAppointments    Int
    appointmentIntervals DateTime[]
    comments             Comment[]

    phone  String
    userId String? @unique @db.ObjectId
    user   User?   @relation(fields: [userId], references: [id])

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    // Date      Date[]
}

model HizmetVeren {
    id                   String          @id @default(auto()) @map("_id") @db.ObjectId
    name                 String
    surname              String
    onlineStatus         Boolean
    jobStatus            String
    languages            Language[]
    price                Int
    totalAppointments    Int
    appointmentIntervals DateTime[]
    resume               Resume?
    educationInfo        EducationInfo[]
    serviceAreas         String[]
    comments             Comment[]
    certificates         Certificate[]
    skills               Skill[]

    phone     String
    userId    String?  @unique @db.ObjectId
    user      User?    @relation(fields: [userId], references: [id])
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    // Date      Date[]
}

model EducationInfo {
    id            String       @id @default(auto()) @map("_id") @db.ObjectId
    university    String
    year          String
    profileId     String?
    HizmetVeren   HizmetVeren? @relation(fields: [hizmetVerenId], references: [id])
    hizmetVerenId String?      @db.ObjectId
}

model Certificate {
    id          String @id @default(auto()) @map("_id") @db.ObjectId
    certificate String
    year        String

    HizmetVeren   HizmetVeren? @relation(fields: [hizmetVerenId], references: [id])
    hizmetVerenId String?      @db.ObjectId
}

model Comment {
    id    String @id @default(auto()) @map("_id") @db.ObjectId
    text  String
    stars Int

    profileId String
    profile   HizmetAlan @relation(fields: [profileId], references: [id])

    HizmetVeren   HizmetVeren? @relation(fields: [hizmetVerenId], references: [id])
    hizmetVerenId String?      @db.ObjectId
}

model VerificationCode {
    id             String   @id @default(auto()) @map("_id") @db.ObjectId
    code           String   @unique
    expirationTime DateTime
    userId         String?  @unique @db.ObjectId
    user           User?    @relation(fields: [userId], references: [id])
    createdAt      DateTime @default(now())
    updatedAt      DateTime @updatedAt
}

enum Role {
    customer
    admin
    partner
}

enum UserType {
    RECEIVER
    PROVIDER
}

model Date {
    id            String  @id @default(auto()) @map("_id") @db.ObjectId
    confirm       Boolean @default(false)
    date_of_birth String?
    delete        Boolean @default(false)
    duration      Int
    service       String
    notes         String
    language      String
    kim_icin      String
    gender        String?
    firstName     String?
    lastName      String?
    time          String?

    // hizmetAlanId String?     @unique @db.ObjectId
    // hizmetAlan   HizmetAlan? @relation(fields: [hizmetAlanId], references: [id])

    // hizmetVerenId String?      @unique @db.ObjectId
    // hizmetVeren   HizmetVeren? @relation(fields: [hizmetVerenId], references: [id])

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model SelectedTimes {
    id       String  @id @default(auto()) @map("_id") @db.ObjectId
    active   Boolean @default(true)
    duration Int
    date     String
    time     String
}

model SavedTimes {
    id   String @id @default(auto()) @map("_id") @db.ObjectId
    time String
}

model Adverts {
    id                 String @id @default(auto()) @map("_id") @db.ObjectId
    userID             String
    baslangicTarihi    String
    bitisTarihi        String
    butceTipi          String
    gunlukButceMiktari Int
    reklamAdi          String
    reklamTarihi       String
    reklamTipi         String
}

model Campaign {
    id              String @id @default(auto()) @map("_id") @db.ObjectId
    userID          String
    baslangicTarihi String
    bitisTarihi     String
    kampanyaTuru    String
    kampanyaAdi     String
    kampanyaTarihi  String
}

model Resume {
    id            String       @id @default(auto()) @map("_id") @db.ObjectId
    text          String
    HizmetVeren   HizmetVeren? @relation(fields: [hizmetVerenId], references: [id])
    hizmetVerenId String?      @unique @db.ObjectId
}

model Skill {
    id            String       @id @default(auto()) @map("_id") @db.ObjectId
    name          String
    HizmetVeren   HizmetVeren? @relation(fields: [hizmetVerenId], references: [id])
    hizmetVerenId String?      @db.ObjectId
}

model Language {
    id            String       @id @default(auto()) @map("_id") @db.ObjectId
    languageName  String
    level         String
    HizmetVeren   HizmetVeren? @relation(fields: [hizmetVerenId], references: [id])
    hizmetVerenId String?      @db.ObjectId
}

model Post {
    id        String        @id @default(auto()) @map("_id") @db.ObjectId
    userID    String
    username  String
    caption   String
    category  String
    isLiked   Boolean
    image_url String
    saveBook  String
    likes     Int
    comments  PostComment[] @relation("PostComments")
    timestamp String
    type      String
    video_url String
    savedBy   SavedPost[]   @relation("PostSavedBy")
}

model SavedPost {
    id     String @id @default(auto()) @map("_id") @db.ObjectId
    user   User   @relation("UserSavedPosts", fields: [userId], references: [id])
    userId String
    post   Post   @relation("PostSavedBy", fields: [postId], references: [id])
    postId String
}

model PostComment {
    id        String @id @default(auto()) @map("_id") @db.ObjectId
    userID    String
    username  String
    comment   String
    timestamp String
    postId    String @db.ObjectId
    post      Post   @relation("PostComments", fields: [postId], references: [id], onDelete: Cascade)
}
